APPLICATION PROGRAM 5:
In a computer network, there are multiple routers connected by communication links. The task is to find the maximum amount of data that can be routed from a source router to a destination router while considering the capacities of the links. This information is 
crucial for optimizing network traffic and ensuring efficient data routing. The objective of this case study is to implement the Max Flow Min Cut theorem in C language to solve the computer network routing problem. By solving this problem, we can determine the 
maximum flow of data from a source router to a destination router, considering the link capacities.

#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define V 6 // Number of vertices in the network

// A utility function to find the minimum of two values
int min(int a, int b) {
    return a < b ? a : b;
}

// Returns true if there is a path from the source 's' to 't' in residual graph.
// Also, fills the path with the bottleneck capacity in 'path_flow'.
bool bfs(int rGraph[V][V], int s, int t, int parent[]) {
    // Create a visited array and initialize all vertices as not visited
    bool visited[V];
    for (int i = 0; i < V; i++) {
        visited[i] = false;
    }

    // Create a queue, enqueue source vertex, mark it as visited
    // and set parent of source vertex to -1
    int queue[V];
    int front = 0, rear = 0;
    queue[rear++] = s;
    visited[s] = true;
    parent[s] = -1;

    while (front != rear) {
        int u = queue[front++];
        for (int v = 0; v < V; v++) {
            if (!visited[v] && rGraph[u][v] > 0) {
                queue[rear++] = v;
                parent[v] = u;
                visited[v] = true;
            }
        }
    }

    // Return true if there is a path from source to sink
    return visited[t];
}

// Ford-Fulkerson algorithm to find the maximum flow
int fordFulkerson(int graph[V][V], int s, int t) {
    int rGraph[V][V]; // Residual graph
    for (int u = 0; u < V; u++) {
        for (int v = 0; v < V; v++) {
            rGraph[u][v] = graph[u][v];
        }
    }

    int parent[V]; // This array is filled by BFS and stores the path

    int maxFlow = 0; // Initialize the maximum flow

    // Augment the flow while there is a path from source to sink
    while (bfs(rGraph, s, t, parent)) {
        // Find the bottleneck capacity in the path found by BFS
        int pathFlow = INT_MAX;
        for (int v = t; v != s; v = parent[v]) {
            int u = parent[v];
            pathFlow = min(pathFlow, rGraph[u][v]);
        }

        // Update residual capacities and reverse edges along the path
        for (int v = t; v != s; v = parent[v]) {
            int u = parent[v];
            rGraph[u][v] -= pathFlow;
            rGraph[v][u] += pathFlow;
        }

        // Add path flow to the overall flow
        maxFlow += pathFlow;
    }

    return maxFlow;
}

int main() {
    int graph[V][V] = {
        {0, 16, 13, 0, 0, 0},
        {0, 0, 10, 12, 0, 0},
        {0, 4, 0, 0, 14, 0},
        {0, 0, 9, 0, 0, 20},
        {0, 0, 0, 7, 0, 4},
        {0, 0, 0, 0, 0, 0}
    };

    int source = 0;
    int sink = 5;

    int maxFlow = fordFulkerson(graph, source, sink);

    printf("Maximum flow from source to sink is %d\n", maxFlow);

    return 0;
}


ALGORITHM:
FORD-FULKERSON METHOD (G, s, t)
 1. Initialize flow f to 0
 2. while there exists an augmenting path p
 3. do argument flow f along p
 4. Return f
